project(mupdf-okular)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH})

find_package(ZLIB REQUIRED)
find_package(Freetype REQUIRED)
find_package(JPEG REQUIRED)
find_package(LIBOPENJPEG REQUIRED)
find_package(jbig2dec REQUIRED)

macro(MUPDF_GENERATE_CMAP depends destsource)
  set(outcmapfile ${CMAKE_CURRENT_BINARY_DIR}/generated/${destsource})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/generated)
  add_custom_command(
    OUTPUT ${outcmapfile}
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/cmapdump
    ARGS ${outcmapfile} ${ARGN}
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/cmapdump ${ARGN}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Generating ${destsource}"
  )
  set(${depends} ${${depends}} ${outcmapfile})
endmacro(MUPDF_GENERATE_CMAP)

macro(MUPDF_GENERATE_CMAP_GLOB depends destsource globpattern)
  file(GLOB sources RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${globpattern})
  mupdf_generate_cmap(${depends} ${destsource} ${sources})
endmacro(MUPDF_GENERATE_CMAP_GLOB)

macro(MUPDF_GENERATE_FONT depends destsource)
  set(outfontfile ${CMAKE_CURRENT_BINARY_DIR}/generated/${destsource})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/generated)
  set(realsources)
  foreach (src ${ARGN})
    if (IS_ABSOLUTE ${src})
      set(realsources ${realsources} ${src})
    else (IS_ABSOLUTE ${src})
      set(realsources ${realsources} ${CMAKE_CURRENT_SOURCE_DIR}/${src})
    endif (IS_ABSOLUTE ${src})
  endforeach (src ${ARGN})
  add_custom_command(
    OUTPUT ${outfontfile}
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/fontdump
    ARGS ${outfontfile} ${realsources}
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/fontdump ${realsources}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Generating ${destsource}"
  )
  set(${depends} ${${depends}} ${outfontfile})
endmacro(MUPDF_GENERATE_FONT)

macro(MUPDF_GENERATE_FONT_GLOB depends destsource globpattern)
  file(GLOB sources ${globpattern})
  mupdf_generate_font(${depends} ${destsource} ${sources})
endmacro(MUPDF_GENERATE_FONT_GLOB)

include_directories(
  ${CMAKE_CURRENT_BINARY_DIR}/generated
  ${CMAKE_CURRENT_SOURCE_DIR}
  fitz
  ${ZLIB_INCLUDE_DIR}
  ${FREETYPE_INCLUDE_DIRS}
  ${JPEG_INCLUDE_DIR}
  ${LIBOPENJPEG_INCLUDE_DIRS}
  ${JBIG2DEC_INCLUDE_DIRS}
)

set(extra_sources)
set(extra_libraries)

add_definitions(-std=gnu99)

add_executable(cmapdump scripts/cmapdump.c)

add_executable(fontdump scripts/fontdump.c)

set(mupdf_SRCS
  draw/draw_affine.c
  draw/draw_blend.c
  draw/draw_device.c
  draw/draw_edge.c
  draw/draw_glyph.c
  draw/draw_mesh.c
  draw/draw_paint.c
  draw/draw_path.c
  draw/draw_scale.c
  draw/draw_unpack.c
  fitz/base_context.c
  fitz/base_error.c
  fitz/base_geometry.c
  fitz/base_getopt.c
  fitz/base_hash.c
  fitz/base_memory.c
  fitz/base_string.c
  fitz/base_time.c
  fitz/base_trans.c
  fitz/base_xml.c
  fitz/crypt_aes.c
  fitz/crypt_arc4.c
  fitz/crypt_md5.c
  fitz/crypt_sha2.c
  fitz/dev_bbox.c
  fitz/dev_list.c
  fitz/dev_null.c
  fitz/dev_text.c
  fitz/dev_trace.c
  fitz/doc_link.c
  fitz/doc_outline.c
  fitz/doc_search.c
  fitz/filt_basic.c
  fitz/filt_dctd.c
  fitz/filt_faxd.c
  fitz/filt_flate.c
  fitz/filt_jbig2d.c
  fitz/filt_lzwd.c
  fitz/filt_predict.c
  fitz/image_jpeg.c
  fitz/image_jpx.c
  fitz/image_md5.c
  fitz/image_png.c
  fitz/image_save.c
  fitz/image_tiff.c
  fitz/memento.c
  fitz/res_bitmap.c
  fitz/res_colorspace.c
  fitz/res_font.c
  fitz/res_halftone.c
  fitz/res_path.c
  fitz/res_pixmap.c
  fitz/res_shade.c
  fitz/res_store.c
  fitz/res_text.c
  fitz/stm_buffer.c
  fitz/stm_comp_buf.c
  fitz/stm_open.c
  fitz/stm_read.c
  pdf/pdf_annot.c
  pdf/pdf_cmap.c
  pdf/pdf_cmap_load.c
  pdf/pdf_cmap_parse.c
  pdf/pdf_cmap_table.c
  pdf/pdf_colorspace.c
  pdf/pdf_crypt.c
  pdf/pdf_encoding.c
  pdf/pdf_event.c
  pdf/pdf_font.c
  pdf/pdf_fontfile.c
  pdf/pdf_form.c
  pdf/pdf_function.c
  pdf/pdf_image.c
  pdf/pdf_interpret.c
  pdf/pdf_js_none.c
  pdf/pdf_lex.c
  pdf/pdf_metrics.c
  pdf/pdf_nametree.c
  pdf/pdf_object.c
  pdf/pdf_outline.c
  pdf/pdf_page.c
  pdf/pdf_parse.c
  pdf/pdf_pattern.c
  pdf/pdf_repair.c
  pdf/pdf_shade.c
  pdf/pdf_store.c
  pdf/pdf_stream.c
  pdf/pdf_type3.c
  pdf/pdf_unicode.c
  pdf/pdf_write.c
  pdf/pdf_xobject.c
  pdf/pdf_xref_aux.c
  pdf/pdf_xref.c
  ${extra_sources}
)
mupdf_generate_cmap_glob(mupdf_DEPS cmap_cns.h cmaps/cns/*)
mupdf_generate_cmap_glob(mupdf_DEPS cmap_gb.h cmaps/gb/*)
mupdf_generate_cmap_glob(mupdf_DEPS cmap_japan.h cmaps/japan/*)
mupdf_generate_cmap_glob(mupdf_DEPS cmap_korea.h cmaps/korea/*)
mupdf_generate_font_glob(mupdf_DEPS font_base14.h fonts/*.cff)
mupdf_generate_font(mupdf_DEPS font_droid.h fonts/droid/DroidSans.ttf fonts/droid/DroidSansMono.ttf)
mupdf_generate_font(mupdf_DEPS font_cjk_full.h fonts/droid/DroidSansFallbackFull.ttf)
add_custom_target(depsources DEPENDS ${mupdf_DEPS})

add_library(mupdf-okular SHARED ${mupdf_SRCS})
target_link_libraries(mupdf-okular ${ZLIB_LIBRARIES} ${FREETYPE_LIBRARIES} ${JPEG_LIBRARIES} ${LIBOPENJPEG_LIBRARIES} ${JBIG2DEC_LIBRARIES} ${extra_libraries})
if (NOT MSVC)
  target_link_libraries(mupdf-okular m)
endif (NOT MSVC)
add_dependencies(mupdf-okular depsources)
install(TARGETS mupdf-okular ${INSTALL_TARGETS_DEFAULT_ARGS})
